op = 2; % option 1=combined field, D+i*k*S; 2=DLP; 3=SLP

% complexified patch
n = 40; % num of pts on along each direction
L = 30; % patch size = 2L x 2L
a = 1/2; b = 3/4; L0 = 10;  % params for complexification
s = patch_cmpl(L,n,a,b,L0); % create the patch
subplot(1,2,1)
plot_surf(s)

% operator
ka = 1;
if op == 1
    A = eye((n+1)^2)/2+Helm3dDLP_cmpl(ka,s,s)+1i*ka*Helm3dSLP_cmpl(ka,s,s);
elseif op == 2
    A = eye((n+1)^2)/2+Helm3dDLP_cmpl(ka,s,s);
elseif op == 3
    A = Helm3dSLP_cmpl(ka,s,s);
end

% compute zeta weights
if 1 % general order of accuracy, MAY STILL BE BUGGY
    ord = 5;
    lptypes = {'s','d'};
    ZZ = Helm3dPatchZetaSparse_multi_cmpl(ka,ord,lptypes,s);
    Ds = ZZ{1};
    Dd = ZZ{2};
else % simple test: ord = 3
    [Zs,Zd] = epstein_zeta_cmpl(1,s.E,s.F,s.G,s.e,s.f,s.g);
    % [Zs,Zd] = epstein_zeta_cmpl(1,real(s.E),real(s.F),real(s.G),real(s.e),real(s.f),real(s.g));
    Ds = spdiags(s.w(:)/(4*pi).*(-Zs(:)/s.h + 1i*ka),[0],(n+1)^2,(n+1)^2);
    Dd = spdiags(Zd(:).*s.w(:)/(4*pi*s.h),[0],(n+1)^2,(n+1)^2);
end
% sparse correction
if op == 1
    A = A + (Dd + 1i*ka*Ds);
elseif op == 2
    A = A + Dd;
elseif op == 3
    A = A + Ds;
end

% boundary condition
p.x = [5;5;-10];
p.w = 1;
rhs = Helm3dSLP_cmpl(ka,s,p);

% solve
tau = A\rhs;
subplot(2,2,2)
surf(s.u,s.v,reshape(real(tau),s.Nu,s.Nv))
title('density (real part)')
subplot(2,2,4)
%surf(s.u,s.v,reshape(imag(tau),s.Nu,s.Nv))
surf(s.u,s.v,reshape(log10(abs(tau)),s.Nu,s.Nv))
title('log10 |density|')


% verify
t.x = [-5;-5;10];
subplot(1,2,1), hold on, plot3(p.x(1),p.x(2),p.x(3),'*'),
plot3(t.x(1),t.x(2),t.x(3),'*'), hold off, %axis equal
title('surface (real part)')

u_exact = Helm3dSLP_cmpl(ka,t,p);
if op == 1
    u = Helm3dDLP_cmpl(ka,t,s)*tau+1i*ka*Helm3dSLP_cmpl(ka,t,s)*tau;
elseif op == 2
    u = Helm3dDLP_cmpl(ka,t,s)*tau;
elseif op == 3
    u = Helm3dSLP_cmpl(ka,t,s)*tau;
end
err = abs(u - u_exact)/abs(u_exact)

function plot_surf(s)
Nr = [s.Nu,s.Nv];   % reshaping sizes
                    % note: assume grid generated by 'ndgrid'. If used 'meshgrid' then need to swap dim(x) and dim(y)!
x = reshape(real(s.x(1,:)),Nr);
y = reshape(real(s.x(2,:)),Nr);
z = reshape(real(s.x(3,:)),Nr);
surf(x,y,z)
end
